title 결제 API 

Webpage (사용자)-> Interceptor (토큰 관리 서비스) : 1. 토큰 검증
alt 검증에 실패할 경우
Webpage (사용자)<-- Interceptor (토큰 관리 서비스) : 2. 토큰 상태 반환 
else 검증에 성공할 경우

Interceptor (토큰 관리 서비스) -> Module (예약 관리 서비스): 3. 결제 요청

Module (예약 관리 서비스) -> Module (유저 관리 서비스): 4. 결제 요청

Module (유저 관리 서비스) -> DB (유저) : 5.해당 유저 조회
Module (유저 관리 서비스) <-- DB (유저) : 6. 해당 유저 리턴(잔액 포함)
alt 해당 유저의 잔액이 금액 보다 작을 경우
Webpage (사용자) <--Module (유저 관리 서비스): 7. 잔액이 부족합니다 리턴
end
Module (유저 관리 서비스) -> Module (유저 관리 서비스) : 7. 해당 유저의 잔액 차감
Module (유저 관리 서비스) -> DB (유저) : 8. 해당 유저의 잔액 차감된 정보 저장

Module (예약 관리 서비스) <-- DB (유저) : 9. 업데이트 결과 리턴

Module (예약 관리 서비스) -> Module(좌석 관리 서비스): 10. 좌석 상태 변경 요청

Module(좌석 관리 서비스) -> DB(콘서트 좌석) : 11. 해당 좌석 조회
Module(좌석 관리 서비스) <-- DB(콘서트 좌석): 12. 조회된 콘서트 좌석 리턴
Module(좌석 관리 서비스) -> DB(콘서트 좌석) : 13. 좌석 상태 변경 후 저장
Module (예약 관리 서비스) <-- DB(콘서트 좌석): 14. 업데이트 결과 리턴

Module (예약 관리 서비스) -> DB(예약) : 15.해당 예약 조회 
Module (예약 관리 서비스) <-- DB(예약) : 16.조회된 예약 리턴
Module (예약 관리 서비스) -> Module (예약 관리 서비스) : 17. 조회된 예약 만료 여부 확인

alt 예약이 만료되었을 경우
Webpage (사용자) <-- Module (예약 관리 서비스): 18.해당 예약이 만료되었습니다 리턴
end

Module (예약 관리 서비스) -> DB(예약) : 18. 에약 상태값 변경 후 저장



Module (예약 관리 서비스) <-- DB(예약) : 19. 업데이트 결과 리턴

Module (예약 관리 서비스) -> DB(토큰) : 20. 사용한 토큰 삭제

Webpage (사용자) <-- Module (예약 관리 서비스): 21. 업데이트 결과 리턴


end